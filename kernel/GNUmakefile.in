# Nuke built-in rules and variables.
override MAKEFLAGS += -rR

# Convenience macro to reliably declare user overridable variables.
define DEFAULT_VAR =
    ifeq ($(origin $1),default)
        override $(1) := $(2)
    endif
    ifeq ($(origin $1),undefined)
        override $(1) := $(2)
    endif
endef

# Import some autoconf variables as make variables.
override ARCH := @ARCH@
override SRCDIR := @SRCDIR@
override BUILDDIR := @BUILDDIR@
override PACKAGE_VERSION := @PACKAGE_VERSION@
override PACKAGE_TARNAME := @PACKAGE_TARNAME@
override OUTPUT := bin/$(PACKAGE_TARNAME)
override TOOLCHAIN_FILE := @TOOLCHAIN_FILE@
override WERROR_FLAG := @WERROR_FLAG@
override DEFAULT_CFLAGS := @CFLAGS@
override DEFAULT_CPPFLAGS := @CPPFLAGS@
override DEFAULT_LDFLAGS := @LDFLAGS@

LYRE_DEBUG ?= @LYRE_DEBUG@

# Autoconf dir variables.
override prefix := @prefix@
override datarootdir := @datarootdir@

# Generator executables.
override MKDIR_P := @MKDIR_P@
override INSTALL := @INSTALL@
override INSTALL_DATA := @INSTALL_DATA@

override GREP := @GREP@
export GREP
override SED := @SED@
export SED
override AWK := @AWK@
export AWK

# Macros to make our build system still work from within paths with spaces
# or other special characters.
override SPACE := $(subst ,, )
MKESCAPE = $(subst $(SPACE),\ ,$(1))
SHESCAPE = $(subst ','\'',$(1))
OBJESCAPE = $(subst .a ,.a' ',$(subst .o ,.o' ',$(call SHESCAPE,$(1))))

# Include toolchain file.
include $(call MKESCAPE,$(TOOLCHAIN_FILE))
export OBJDUMP

# User controllable CFLAGS.
$(eval $(call DEFAULT_VAR,CFLAGS,$(DEFAULT_CFLAGS)))

# User controllable CPPFLAGS.
$(eval $(call DEFAULT_VAR,CPPFLAGS,$(DEFAULT_CPPFLAGS)))

# User controllable linker flags.
$(eval $(call DEFAULT_VAR,LDFLAGS,$(DEFAULT_LDFLAGS)))

# Internal C flags that should not be changed by the user.
override CFLAGS += \
    -Wall \
    -Wextra \
    -Wno-microsoft-anon-tag \
    -Wvla \
    -Wshadow \
    $(WERROR_FLAG) \
    -g \
    -std=gnu11 \
    -nostdinc \
    -fms-extensions \
    -fno-omit-frame-pointer \
    -fno-strict-aliasing \
    -ffreestanding \
    -fno-stack-protector \
    -fno-stack-check \
    -fno-lto \
    -fno-PIE \
    -fno-PIC

# Internal C preprocessor flags that should not be changed by the user.
override CPPFLAGS := \
    -I'$(call SHESCAPE,$(SRCDIR))/mlibc-headers' \
    -I'$(call SHESCAPE,$(SRCDIR))/linux-headers' \
    -I'$(call SHESCAPE,$(SRCDIR))/freestanding-headers' \
    -I'$(call SHESCAPE,$(SRCDIR))' \
    $(CPPFLAGS) \
    -Ddebug=$(LYRE_DEBUG) \
    -D__MLIBC_ABI_ONLY \
    -DPRINTF_ALIAS_STANDARD_FUNCTION_NAMES=1 \
    -DPRINTF_ALIAS_STANDARD_FUNCTION_NAMES_HARD=1 \
    -DPRINTF_SUPPORT_DECIMAL_SPECIFIERS=0 \
    -DPRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS=0 \
    -MMD \
    -MP

# Internal linker flags that should not be changed by the user.
override LDFLAGS += \
    -nostdlib \
    -static \
    -z max-page-size=0x1000 \
    -T '$(call SHESCAPE,$(SRCDIR)/linker-$(ARCH).ld)'

ifeq ($(LD_HAS_NO_PIE),yes)
    override LDFLAGS += -no-pie
endif

# Set archtecture specific variables (and check that the architecture is supported).
ifeq ($(ARCH),x86_64)
    override CFLAGS += \
        -m64 \
        -march=x86-64 \
        -mabi=sysv \
        -mno-80387 \
        -mno-mmx \
        -mno-sse \
        -mno-sse2 \
        -mno-red-zone \
        -mcmodel=kernel
    override LDFLAGS += \
        -m elf_x86_64
    override LIBGCC := x86_64-no-red-zone
else
    $(error Architecture $(ARCH) not supported)
endif

# Use "find" to glob all *.c, *.S, and *.asm files in the tree and obtain the
# object and header dependency file names.
override CFILES := $(shell cd '$(call SHESCAPE,$(SRCDIR))' && find -L . -type f -name '*.c')
override ASFILES := $(shell cd '$(call SHESCAPE,$(SRCDIR))' && find -L . -type f -name '*.S')
override OBJ := $(addprefix $(call MKESCAPE,$(BUILDDIR))/,$(CFILES:.c=.o) $(ASFILES:.S=.o))
override HEADER_DEPS := $(CFILES:.c=.d) $(ASFILES:.S=.d)

# Default target.
.PHONY: all
all: $(OUTPUT)

# Link rules for the final kernel executable.
$(OUTPUT): $(OBJ) $(call MKESCAPE,$(SRCDIR))/libgcc-binaries/libgcc-$(LIBGCC).a
	$(MKDIR_P) bin
	$(LD) '$(call OBJESCAPE,$^)' $(LDFLAGS) -o $@
	'$(call SHESCAPE,$(SRCDIR))/gensyms.sh' $@ > symtab.map
	$(CC) $(CFLAGS) $(CPPFLAGS) -x c -c symtab.map -o symtab.o
	$(LD) '$(call OBJESCAPE,$^)' symtab.o $(LDFLAGS) -o $@

# Include header dependencies.
-include $(HEADER_DEPS)

# Compilation rules for *.c files.
$(call MKESCAPE,$(BUILDDIR))/%.o: $(call MKESCAPE,$(SRCDIR))/%.c
	$(MKDIR_P) "$$(dirname '$(call SHESCAPE,$@)')"
	$(CC) $(CFLAGS) $(CPPFLAGS) -c '$(call SHESCAPE,$<)' -o $@

# Compilation rules for *.S files.
$(call MKESCAPE,$(BUILDDIR))/%.o: $(call MKESCAPE,$(SRCDIR))/%.S
	$(MKDIR_P) "$$(dirname '$(call SHESCAPE,$@)')"
	$(CC) $(CFLAGS) $(CPPFLAGS) -c '$(call SHESCAPE,$<)' -o $@

# Remove object files and the final executable.
.PHONY: clean
clean:
	rm -rf bin $(OBJ) $(HEADER_DEPS)
	rm -rf symtab.map symtab.o symtab.d

# Remove files generated by configure.
.PHONY: distclean
distclean: clean
	rm -rf config.log config.status GNUmakefile toolchain-files

# Create a release tarball.
.PHONY: dist
dist:
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"
	$(MKDIR_P) "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"
	cp -rp '$(call SHESCAPE,$(SRCDIR))'/.git "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/
	cd "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)" && git checkout .
	cd "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)" && ./bootstrap
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/.git
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/.gitignore
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/.github
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/autom4te.cache
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/freestanding-headers/.git
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/libgcc-binaries/.git
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/libgcc-binaries/.gitignore
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/flanterm/.git
	libgcc_needed="x86_64-no-red-zone"; \
	for f in $$libgcc_needed; do \
		mv "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)/libgcc-binaries/libgcc-$$f.a" "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)/libgcc-binaries/libgcc-$$f.a.save"; \
	done; \
	rm "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)/libgcc-binaries"/*.a; \
	for f in $$libgcc_needed; do \
		mv "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)/libgcc-binaries/libgcc-$$f.a.save" "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)/libgcc-binaries/libgcc-$$f.a"; \
	done
	echo "$(PACKAGE_VERSION)" >"$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/version
	tar -Jcf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)".tar.xz "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"
	tar -zcf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)".tar.gz "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"

# Remove ALL generated files.
.PHONY: maintainer-clean
maintainer-clean: distclean
	cd '$(call SHESCAPE,$(SRCDIR))' && rm -rf printf flanterm mlibc-headers linux-headers freestanding-headers libgcc-binaries freestanding-toolchain limine.h configure build-aux *'~' autom4te.cache

# Install files and executables to the final locations.
.PHONY: install
install: all
	$(INSTALL) -d '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/$(PACKAGE_TARNAME)'
	$(INSTALL_DATA) $(OUTPUT) '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/$(PACKAGE_TARNAME)/'

# Install and strip executables.
.PHONY: install-strip
install-strip: install
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/$(PACKAGE_TARNAME)'/"$$(basename '$(OUTPUT)')"

# Uninstall previously installed files and executables.
.PHONY: uninstall
uninstall:
	rm -rf '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/$(PACKAGE_TARNAME)'
